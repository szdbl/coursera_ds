subset <- data[,which(naCols < 90000)]
tree1 <- tree(frmTermNorm ~ ., data=subset)
naCols <- vector(length=length(data))
for (i in 1:length(data)) { naCols[i]<- sum(is.na(data[,i])) }
subset <- data[,which(naCols < 80000)]
tree1 <- tree(frmTermNorm ~ ., data=subset)
data <- subset
data$pfiID <- as.character(data$pfiID)
data$pfiSiteID <- as.numeric(data$pfiSiteID)
data$etpID <- as.numeric(data$etpID)
data$stgStatutForem <- as.numeric(data$stgStatutForem)
data$stgNISS <- as.numeric(data$stgNISS)
data$ofrID <- as.numeric(data$ofrID)
data$ofrCodeFP <- as.numeric(data$ofrCodeFP)
data$ofrCommPar <- as.character(data$ofrCommPar)
data$frmCodeRomeELink <- as.numeric(data$frmCodeRomeELink)
tree1 <- tree(frmTermNorm ~ ., data=subset)
str(subset)
subset <- data
tree1 <- tree(frmTermNorm ~ ., data=subset)
tree1
tokeep <- !names(data) %in% c("frmArretOrigDec",
"frmArretCode")
data <- data[,tokeep]
subset <- data
tree1 <- tree(frmTermNorm ~ ., data=subset)
tree1
plot(tree1)
text(tree1)
partition.tree(tree1,add=TRUE)
tokeep <- !names(data) %in% c("frmSuivi3InsAVis")
subset <- subset[,tokeep]
tokeep <- !names(data) %in% c("frmSuivi3InsAvis")
subset <- subset[,tokeep]
tree1 <- tree(frmTermNorm ~ ., data=subset)
tree1
plot(tree1)
text(tree1)
tokeep <- !names(data) %in% c("frmSuivi3Modalite")
tree1 <- tree(frmTermNorm ~ ., data=subset)
subset <- subset[,tokeep]
tokeep <- !names(data) %in% c("frmSuivi3Modalite")
subset <- subset[,tokeep]
tokeep <- !names(data) %in% c("frmSuivi3Modalite")
subset <- subset[,tokeep]
tokeep <- !names(subset) %in% c("frmSuivi3Modalite")
subset <- subset[,tokeep]
tree1 <- tree(frmTermNorm ~ ., data=subset)
tree1
plot(tree1)
text(tree1)
table(frmNbrSem,frmTermNorm)
plot(table(frmNbrSem,frmTermNorm))
detach(data)
attach(subset)
table(frmNbrSem,frmTermNorm)
plot(table(frmNbrSem,frmTermNorm))
table(frmNbrSem,frmSuivi3InsAvis)
table(frmNbrSem,frmSuivi1InsAvis)
plot(table(frmSuivi1InsAvis,frmTermNorm))
plot(table(frmSuivi1InsAvis,frmTermNorm))
plot(table(frmSuivi2InsAvis,frmTermNorm))
plot(table(frmSuivi3InsAvis,frmTermNorm))
summary(table(frmSuivi1InsAvis,frmTermNorm))
tokeep <- !names(subset) %in% c("frmSuivi1InsAvis")
tokeep <- !names(subset) %in% c("frmSuivi2InsAvis")
tokeep <- !names(subset) %in% c("frmSuivi1InsAvis", "frmSuivi2InsAvis")
subset <- subset[,tokeep]
tree1 <- tree(frmTermNorm ~ ., data=subset)
tree1
tokeep <- !names(subset) %in% c("frmSuivi1Modalite", "frmSuivi2Modalite")
subset <- subset[,tokeep]
tree1
tree1 <- tree(frmTermNorm ~ ., data=subset)
tree1
tokeep <- !names(subset) %in% c("frmNbrSem", "frmProlongNbrSem")
subset <- subset[,tokeep]
tree1 <- tree(frmTermNorm ~ ., data=subset)
tree1
plot(frmSuivi3InsAvis,frmTermNorm)
plot(frmSuivi1InsAvis,frmTermNorm)
plot(frmSalaireBrut,frmTermNorm)
plot(ofrSalaireBrut,frmTermNorm)
source('~/Projects/Institutions/Forem/Pfi/PFI/SlideWare/Formule-de-la-reussite.R')
# R Code for Chapter 3 of Introduction to Data Mining
# Michael Hahsler
# load the data set
data(iris)
head(iris)
# get summary statistics
summary(iris)
#########################################################################
# get mean and standard deviation for sepal length
mean(iris$Sepal.Length)
sd(iris$Sepal.Length)
# apply mean, sd and mediam to columns (data.frame is a list of
#   vectors = columns)
sapply(iris[1:4], FUN=mean)
sapply(iris[1:4], FUN=median)
sapply(iris[1:4], FUN=sd)
sapply(iris[1:4], FUN=var)
########################################################################
# tabulate date
table(iris$Sepal.Length, iris$Sepal.Width)
# discretize the data first since there are too many values
# (cut divides the range by breaks, see package discretization for
# other methods)
iris_discrete <- data.frame(
Sepal.Length= cut(iris$Sepal.Length, breaks=3,
labels=c("small", "medium", "large"), ordered=TRUE),
Sepal.Width= cut(iris$Sepal.Width, breaks=3,
labels=c("small", "medium", "large"), ordered=TRUE),
Petal.Length= cut(iris$Petal.Length, breaks=3,
labels=c("small", "medium", "large"), ordered=TRUE),
Petal.Width= cut(iris$Petal.Width, breaks=3,
labels=c("small", "medium", "large"), ordered=TRUE),
Species = iris$Species
)
head(iris_discrete)
summary(iris_discrete)
table(iris_discrete$Sepal.Length, iris_discrete$Sepal.Width)
table(iris_discrete$Petal.Length, iris_discrete$Petal.Width)
table(iris_discrete$Petal.Length, iris_discrete$Petal.Species)
table(iris_discrete)
# test if the two features are independent given the counts in the
# contingency table (H0: independence)
# p-value: the probability of seeing a more extreme value of the test
# statistic under the assumption that H0 is correct. Low p-values (typically
# less than .05 or .01) indicate that H0 should be rejected.
tbl <- table(iris_discrete$Sepal.Length, iris_discrete$Sepal.Width)
chisq.test(tbl)
# Fisher's exact test is  better for small counts (cells with counts <5)
fisher.test(tbl)
#########################################################################
# percentiles
sapply(iris[1:4], FUN=quantile)
# interquartile range
quantile(iris$Petal.Length)
quantile(iris$Petal.Length)[4] - quantile(iris$Petal.Length)[2]
# define MAD (median average deviation)
mad <- function(x) median(abs(x-mean(x)))
mad(iris$Petal.Length)
########################################################################
# Visualizations
# histogram
hist(iris$Petal.Width)
hist(iris$Petal.Width, breaks=20, col="grey")
# ECDF
e <- ecdf(iris$Petal.Width)
hist(iris$Petal.Width, breaks=20, freq=FALSE, col="gray")
lines(e, col="red", lwd=2)
# boxplot
boxplot(iris[,1:4])
# scatter plot
plot(x=iris$Petal.Length, y=iris$Petal.Width, col=iris$Species)
pairs(iris, col=iris$Species)
# data matrix visualization
iris_matrix <- as.matrix(iris[,1:4])
image(iris_matrix)
library(seriation)
pimage(iris_matrix, ylab="Object (ordered by species)", main="Original values",
colorkey=TRUE)
pimage(scale(iris_matrix), ylab="Object (ordered by species)",
main="Standard deviations from the feature mean",
range=c(-3.5,3.5), col=diverge_hcl(100), colorkey=TRUE)
# correlation matrix
cor(iris_matrix) # correlation between features
# test if correlation is significantly different from 0
cor.test(iris$Sepal.Length, iris$Sepal.Width)
cor.test(iris$Petal.Length, iris$Petal.Width) #this one is significant
cm <- cor(t(iris_matrix)) # correlation between objects
pimage(cm,
main="Correlation matrix", xlab="Objects", ylab="Objects",
colorkey=TRUE, range=c(-1,1), col=diverge_hcl(100))
# parallel coordinates
library(MASS)
parcoord(iris[,1:4], col=iris$Species)
source('~/Projects/Institutions/Forem/Pfi/PFI/SlideWare/Formule-de-la-reussite.R')
table(frmNbrSem)
attach(data)
table(frmNbrSem)
pareto.chart(table(frmNbrSem), ylab="Frequency")
??pareto.chart
library(qcc)
install.packages("qcc")
library(qcc)
pareto.chart(table(frmNbrSem), ylab="Frequency")
pareto.chart(table(iris$Petal.Length), ylab="Frequency")
pareto.chart(table(iris[1:50,]$Petal.Length), ylab="Frequency")
pareto.chart(table(iris[iris$Species=="setosa",]$Petal.Length), ylab="Frequency")
pareto.chart(table(iris[iris$Species=="virginica",]$Petal.Length), ylab="Frequency")
table(iris$Species)
pareto.chart(table(iris[iris$Species=="versicolor",]$Petal.Length), ylab="Frequency")
pareto.chart(table(iris[iris$Species=="setosa",]$Petal.Length), ylab="Frequency")
pareto.chart(table(frmNbrSem), ylab="Frequency")
table(ofrSalaireBrut)
table(cut(ofrSalaireBrut))
table(cut(ofrSalaireBrut, breaks=10))
plot(table(cut(ofrSalaireBrut, breaks=10)))
plot(table(cut(ofrSalaireBrut, breaks=20)))
plot(table(cut(ofrSalaireBrut, breaks=40)))
plot(table(cut(ofrSalaireBrut, breaks=80)))
plot(table(cut(ofrSalaireBrut, breaks=20)))
plot(table(cut(ofrSalaireBrut, breaks=25)))
plot(table(cut(ofrSalaireBrut, breaks=30)))
plot(table(cut(ofrSalaireBrut, breaks=60)))
plot(table(cut(ofrSalaireBrut, breaks=30)))
plot(table(cut(ofrSalaireBrut, breaks=25)))
table(cut(ofrSalaireBrut, breaks=25))
table(cut(ofrSalaireBrut, breaks=5))
summary(cut(ofrSalaireBrut, breaks=5))
table(cut(ofrSalaireBrut, breaks=5), useNA="ifany")
plot(table(cut(ofrSalaireBrut, breaks=60)))
subset(subset, subset=ofrSalaireBrut < 0)
subset(subset, subset=(ofrSalaireBrut < 0)
)
subset(data, select=ofrSalaireBrut, subset=(ofrSalaireBrut < 0)
)
subset(data, select=ofrSalaireBrut, subset=(ofrSalaireBrut < 20)
)
subset(data, select=ofrSalaireBrut, subset=(ofrSalaireBrut < 10))
subset(data, select=ofrSalaireBrut, subset=(ofrSalaireBrut < 6))
grep()
grep(names(data), "alai")
?grep
grep("Salaire", names(data))
names(c(42,50))
names(data[,42])
names(data[,c(42)])
names
names(data)
lapply(data$frmSuivi1InsAvis, function(x) sum(is.na(x)))
sapply(data$frmSuivi1InsAvis, function(x) sum(is.na(x)))
sapply(data$frmSuivi1InsAvis, function(x) length(is.na(x)))
sapply(data$frmSuivi1InsAvis, function(x) count(is.na(x)))
?apply
tapply(ofrSalaireBrut, frmTermNorm, sum)
tapply(ofrSalaireBrut, frmTermNorm, sum, simplify=FALSE
)
tapply(ofrSalaireBrut, frmTermNorm, sum, simplify=FALSE)
lapply(split(ofrSalaireBrut, frmTermNorm), sum)
sapply(split(ofrSalaireBrut, frmTermNorm), sum)
tapply(ofrSalaireBrut, frmTermNorm, mean, na.rm=TRUE)
library(rpart)
t <- rpart(frmTermNorm  .)
t <- rpart(frmTermNorm ~ .)
t <- rpart(frmTermNorm ~ ., data=subset)
t <- rpart(frmTermNorm ~ ., data=data)
t
plot (t)
data
names(data)
d <- data[,-63]
d <- data[,-67]
names(d)
d <- data[,-67]
names(d)
d <- d[,-67]
names(d)
d <- d[,-62]
d <- d[,-62]
names(d)
d <- d[,-25]
d <- d[,-25]
d <- d[,-25]
d <- d[,-25]
names(d)
d <- d[,-25]
d <- d[,-25]
names(d)
rep <- d[,50]
t <- rpart(rep ~ ., data=d)
summary(t)
t
t <- tree(rep ~ ., data=d)
library(tree)
t <- tree(rep ~ ., data=d)
library(adabag)
install.packages("adabag")
t <- bagging(formula=rep ~ ., data=d)
library(adabag)
t <- bagging(formula=rep ~ ., data=d)
t <- bagging(formula=frmTermNorm ~ ., data=data)
data <- read.table("d:/Users/fni/Projects/Insurance/Aviva-FR/admin/reports/treemap-as400.txt", sep="\t", header=TRUE)
rstudio::viewData(data)
rstudio::viewData(data)
treemap
library(treemap)
install.packages("treemap")
library(treemap)
tmPlot(data)
treemap(data)
?treemap
treemap(data="SORTIE")
treemap(data=c("SORTIE"))
names(data)
treemap(data, index=c("SORTIE"))
treemap(data, index=c("SORTIE"), vSize=20)
treemap(data, index=c("SORTIE"), vSize=NULL)
treemap(data, index=c("SORTIE"), vSize="X4267218")
install.packages("googleVis")
Tree <- gvisTreeMap(Regions,  idvar="Region", parentvar="Parent",
sizevar="Val", colorvar="Fac")
library(googleVis)
Tree <- gvisTreeMap(data,  idvar="SORTIE", parentvar="NA.",
sizevar="Val", colorvar="Fac")
names(data)
Tree <- gvisTreeMap(data,  idvar="SORTIE", parentvar="NA.",
sizevar="X4267218")
Tree <- gvisTreeMap(data,  idvar="SORTIE", parentvar="NA.",
sizevar="X4267218", colorvar="")
Tree <- gvisTreeMap(data,  idvar="SORTIE", parentvar="NA.",
sizevar="X4267218", colorvar=NULL)
data <- read.table("~/Projects/Insurance/Aviva-FR/admin/reports/treemap-as400.txt", sep="\t", header=FALSE)
rstudio::viewData(data)
rstudio::viewData(data)
Tree <- gvisTreeMap(data,  idvar="V1", parentvar="V2",
sizevar="V3", colorvar=NULL)
data[1,2]
data[1,2] <- "0"
data[1,2]
levels(data[1])
levels(data[,1])
levels(data[,2])
data <- read.table("~/Projects/Insurance/Aviva-FR/admin/reports/treemap-as400.txt", sep="\t", header=FALSE)
rstudio::viewData(data)
rstudio::viewData(data)
Tree <- gvisTreeMap(data,  idvar="V1", parentvar="V2",
sizevar="V3", colorvar=NULL)
data <- read.table("~/Projects/Insurance/Aviva-FR/admin/reports/treemap-as400.txt", sep="\t", header=FALSE)
names(data)
names(data) <- c("id", "parent", "size")
names(data)
Tree <- gvisTreeMap(data,  idvar="id", parentvar="parent", sizevar="size", colorvar=NULL)
data$col <- 1:1297
data$col <- 1:1294
Tree <- gvisTreeMap(data,  idvar="id", parentvar="parent", sizevar="size", colorvar="col")
plot(Tree)
source('~/Projects/Institutions/Forem/Pfi/PFI/SlideWare/Formule-de-la-reussite.R')
library(RODBC)
## con <- odbcConnect("pfi", uid="sa")
con <- odbcDriverConnect("driver={SQL Server};server=vpiw-cauchy;database=pfi-dev;uid=sa;pwd=LpmdlP")
sql <- "select * from piles where pilDateSortie is not null"
piles <- sqlQuery(con, sql)
table(piles$pilTacheID)
sql <- "select * from piles where pilDateSortie is not null"
sql <- "select * from piles where pilDateSortie is null"
piles <- sqlQuery(con, sql)
table(piles$pilTacheID)
table(piles$pilTacheID)
install.packages("ascii")
data <- read.csv("~/jmeter.csv")
rstudio::viewData(data)
rstudio::viewData(data)
data <- read.csv("~/jmeter.csv", sep=";")
rstudio::viewData(data)
rstudio::viewData(data)
data <- read.csv("~/jmeter.csv", sep=";")
rstudio::viewData(data)
rstudio::viewData(data)
boxplot(data)
summary(data)
install.packages("RODBC")
ls
dir()
install.packages("RODBC")
png(filename="pfiDelaiTraitDuree.png")
library(RODBC)
## con <- odbcConnect("pfi", uid="sa")
con <- odbcDriverConnect("driver={SQL Server};server=vpiw-cauchy;database=pfi-dev;uid=sa;pwd=LpmdlP")
sql <- "SELECT pfiF0DateRecep, frmDateDeb FROM dossier, formation WHERE frmPfiID_fk = pfiID AND pfiF0DateRecep IS NOT NULL"
dossier <- sqlQuery(con, sql)
dossier$pfiDelaiTraitDuree <- as.integer(round((dossier[,2] - dossier[,1])
/ (60 * 60 * 24)))
dossier
hist(dossier$pfiDelaiTraitDuree,breaks=35,col=c("blue3", "gold"))
## title("Dossiers PFI")
dev.off()
hist(dossier$pfiDelaiTraitDuree,breaks=35,col=c("blue3", "gold"))
summary(dossier)
dossier[dossier$pfiDelaiTraitDuree > 100]
dossier[dossier$pfiDelaiTraitDuree > 100,]
dossier[dossier$pfiDelaiTraitDuree > 300,]
dossier[dossier$pfiDelaiTraitDuree > 400,]
dossier[dossier$pfiDelaiTraitDuree < 0,]
dossier[dossier$pfiDelaiTraitDuree < -400,]
dossier <- dossier[dossier$pfiDelaiTraitDuree > -400,]
dossier <- dossier[dossier$pfiDelaiTraitDuree < 400,]
hist(dossier$pfiDelaiTraitDuree,breaks=35,col=c("blue3", "gold"))
hist(dossier$pfiDelaiTraitDuree,breaks=35,col=c("blue3", "gold"), xlim=c(-20,200))
hist(dossier$pfiDelaiTraitDuree,breaks=35,col=c("blue3", "gold"), xlim=c(-10,200))
hist(dossier$pfiDelaiTraitDuree,breaks=350,col=c("blue3", "gold"), xlim=c(-10,200))
hist(dossier$pfiDelaiTraitDuree,breaks=350,col=c("blue3", "gold"), xlim=c(-10,100))
hist(dossier$pfiDelaiTraitDuree,breaks=220,col=c("blue3", "gold"), xlim=c(-10,100))
hist(dossier$pfiDelaiTraitDuree,breaks=880,col=c("blue3", "gold"), xlim=c(-10,100))
?hist
hist(dossier$pfiDelaiTraitDuree,breaks=c(1),col=c("blue3", "gold"), xlim=c(-10,100))
hist(dossier$pfiDelaiTraitDuree,breaks=seq(-10,100,by=1),col=c("blue3", "gold"), xlim=c(-10,100))
hist(dossier$pfiDelaiTraitDuree,breaks=seq(-20,200,by=1),col=c("blue3", "gold"), xlim=c(-10,100))
hist(dossier$pfiDelaiTraitDuree,breaks=seq(-20000,20000,by=1),col=c("blue3", "gold"), xlim=c(-10,100))
hist(dossier$pfiDelaiTraitDuree,breaks=seq(-20000,20000,by=1),col=c("blue3", "gold"), xlim=c(-10,50))
hist(dossier$pfiDelaiTraitDuree,breaks=seq(-20000,20000,by=1),col=c("blue3", "gold"), xlim=c(-1,50))
ls
dir
library(qcc)
data(iris)
pareto.chart(table(iris[iris$Species=="setosa",]$Petal.Length))
install.packages("qcc")
library(qcc)
data(iris)
pareto.chart(table(iris[iris$Species=="setosa",]$Petal.Length))
par()
print("cou" * "cou")
print(expr("cou" * "cou")
)
print(expression("cou" * "cou"))
azrazerzaerzarzrzrzrlllllll=====
describe(iris)
library(ascii)
> options(asciiType = "org")
> library(Hmisc)
install.packages("ascii")
describe(iris)
install.packages("Hmisc")
describe(iris)
install.packages("Defaults")
?barplot
data$date <- as.POSIXct(data$date, format = "%Y-%m-%d")
data <- data[-2]
## barplot(height=data[,2], names=data[,1], las=2)
mids <- barplot(height=data[,2], axisnames=FALSE)
## axis(1, at = mids - (mids[2]-mids[1])/2, labels = data[,1], las=2)
endDate <- as.POSIXct("2014-02-31", format = "%Y-%m-%d")
mstep <- (mids[2] - mids[1]) / 2
axis(1, at=c(mids[1] - mstep, mids + mstep), labels=c(data[,1], endDate), las=2)
data <- read.table("c:/Users/Fabrice/AppData/Local/Temp/babel-10356ghT/R-import-10356hpO",
header=TRUE,
row.names=NULL,
sep="\t",
as.is=TRUE)
data$date <- as.POSIXct(data$date, format = "%Y-%m-%d")
data <- data[-2]
## barplot(height=data[,2], names=data[,1], las=2)
mids <- barplot(height=data[,2], axisnames=FALSE)
## axis(1, at = mids - (mids[2]-mids[1])/2, labels = data[,1], las=2)
endDate <- as.POSIXct("2014-02-31", format = "%Y-%m-%d")
mstep <- (mids[2] - mids[1]) / 2
axis(1, at=c(mids[1] - mstep, mids + mstep), labels=c(data[,1], endDate), las=2)
install.packages("shiny")
library(shiny)
R-version()
version()
Rversion()
install.packages("manipulate")
version()
help(version)
R.Version()
install.packages("manipulate")
install.packages("rCharts")
install.packages(rCharts)
install.packages('rCharts')
install.packages("rCharts")
library(rCharts)
hair_eye_male = subset(as.data.frame(HairEyeColor), Sex == "Male")
n1 <- nPlot(Freq ~ Hair, group = 'Eye',
data = "" type = 'multiBarChart'
)
n1$set(width = 1200, height = 600)
n1$show('inline', include_assets = TRUE, cdn = TRUE)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
library(manipulate)
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
manipulate(myPlot, s = slider(0, 2, step = 0.1))
manipulate(myPlot(s), slider = x(0, 2, step = 0.1))
manipulate(myPlot(s), x.s = slider(0, 2, step = 0.1))
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
runApp()
install.packages("shiny")
runApp()
library(shiny)
runApp()
install.packages("usingr")
install.packages("UsingR")
runApp()
runApp()
RunApp()
runApp()
library(manipulate)
runApp
library(shiny)
runApp()
runApp(displayMode = 'showcase')
help(runApp)
runApp(display.mode = 'showcase')
install.packages("devtools")
library(devtools)
install.packages("Rtools")
find_rtools()
find_rtools()
slidify("index.Rmd")
library(slidify)
slidify("index.Rmd")
getwd
getwd()
setwd("D:/Users/fni/sample/project/first_deck")
slidify("index.Rmd")
browseURL("index.html")
